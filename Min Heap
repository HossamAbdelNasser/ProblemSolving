#include <iostream>

using namespace std;

class BinaryMinHeap {

private:
    int* heap;
    int heapSize;
    int arraySize;
    
    int getLeftChild(int n){
        return 2 * n + 1;
    }

    int getRightChild(int n){
        return 2 * n + 2;
    }

    int getParent(int n){
        return (n-1)/2;
    }

    void swap(int& i, int& j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
    
    bool hasLeft(int index) {
        return getLeftChild(index) < heapSize; 
    }
    
     bool hasRight(int index) {
        return getRightChild(index) < heapSize; 
    }
     
public:
    
    BinaryMinHeap(int size) {
        
        heap = new int[size];
        heapSize = 0;
        arraySize = size;
    }
    
    void insert(int data) {
    
        if (heapSize == arraySize) {
            return ;
        }
        else {
            heapSize++;
            heap[heapSize - 1] = data;
            heapifyUp(heapSize - 1);
        }
    }
    
    void heapifyUp(int index) {
        
        if (index != 0) {
        
            int parent = getParent(index);
            
            if (heap[parent] > heap[index]){
                swap(parent, index);
                heapifyUp(parent);
            }
        }
    }
    
    int* getHeap() {
        
        return heap;
    }

};

int main() {
    
    BinaryMinHeap heap(7);
    
    heap.insert(10);
    heap.insert(5);
    heap.insert(3);
    heap.insert(1);
    
    
    cout << heap.getHeap()[0] << endl;
    
    return 0;
}
