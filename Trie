class TrieNode {

public:    

unordered_map<char, TrieNode*> children;
bool endOfWord = false;

};

class Trie {

private:

TrieNode* root;

public:
    Trie() {
        
         root = new TrieNode();
    }
    
    void insert(string word) {
        
        TrieNode* node = root;

        for (char c : word) {
            if (!node->children.count(c)) 
                node->children[c] = new TrieNode();
            node = node->children[c];
        }
        node->endOfWord = true;
    }
    
    bool search(string word) {
        
        TrieNode* node = root;

        for (char c : word){

         if (!node->children.count(c)) 
            return false;
        node = node->children[c];
        }

        return node->endOfWord;
    }
    
    bool startsWith(string prefix) {
        
        TrieNode* node = root;

        for (char c : prefix) {

             if (!node->children.count(c)) 
                return false;
            node = node->children[c];
        }    

        return true;
    }

  ~Trie() {
        freeMemory(root);
    }

private:
    void freeMemory(TrieNode* node) {
        for (auto& pair : node->children)
            freeMemory(pair.second);
        delete node;
    }

};
