#include <iostream>

using namespace std;

struct node {
  int data;
  node* left;
  node* right;
};

node* getNewNode(int n){
    node* newNode = new node();
    newNode->data = n;
    newNode->left = newNode->right = NULL;
    return newNode;
}

node* insert(node* root, int n) {
    
    if (root == NULL) {
        root = getNewNode(n);
    }
    else if (n <= root->data) {
        root->left = insert(root->left, n);
    } else {
        root->right = insert(root->right, n);
    }
    return root;
}

void print(node* root) {
    
    if (root) {
    
    cout << root->data << endl;
    print(root->left);
        print(root->right);
    }
}

bool searchTree(node* root, int n) {

    if (root) {
        if (root->data == n) {return true;}
    
        else if (root->data >= n) return searchTree(root->left, n);
        else return searchTree(root->right, n);
    }

    return false;
}

node* delNode(node* root, int n) {
    
    if (root == NULL) return root;
    
    else if (root->data >= n) root->left = delNode(root->left, n);
    else if (root->data < n) root->right = delNode(root->right, n);
        
     else {
         
        if (root->data == n) {
            
            if (root->left == NULL && root->right == NULL){
                delete root;
                root = NULL;
         }
            
          else if (root->right) {
              node* temp = root;
              root = root->right;
              delete temp;

        }
            else {
              node* temp = root;
              root = root->left;
              delete temp;
            }
        }
     }
     
     return root;
}

int main() {
    node* root = NULL;
    
    root = insert(root, 15);
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 25);
    root = insert(root, 8);
    root = insert(root, 12);
    
    root = delNode(root, 10);
    
    print(root);
    
    return 0;
}
