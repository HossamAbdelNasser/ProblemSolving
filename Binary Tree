#include <iostream>

using namespace std;

struct node {
  int data;
  node* left;
  node* right;
};

node* getNewNode(int n){
    node* newNode = new node();
    newNode->data = n;
    newNode->left = newNode->right = NULL;
    return newNode;
}

node* insert(node* root, int n) {
    
    if (root == NULL) {
        root = getNewNode(n);
    }
    else if (n <= root->data) {
        root->left = insert(root->left, n);
    } else {
        root->right = insert(root->right, n);
    }
    return root;
}

void print(node* root) {
    
    if (root) {
    
    cout << root->data << endl;
    print(root->left);
        print(root->right);
    }
}

bool searchTree(node* root, int n) {

    if (root) {
        if (root->data == n) {return true;}
    
        else if (root->data >= n) return searchTree(root->left, n);
        else return searchTree(root->right, n);
    }

    return false;
}

node* delNode(node* curRoot, int n) {
    
    node *temp = new node();
        
     if (curRoot) {
         
        if (curRoot->data == n) {
            
            if (curRoot->left == NULL && curRoot->right == NULL){
                
                curRoot = NULL;
         }
            
          else if (curRoot->right) {
              node* temp = curRoot;
              curRoot = curRoot->right;
              delete temp;

        }
            else {
              node* temp = curRoot;
              curRoot = curRoot->left;
              delete temp;
            }
        }
        
        else if (curRoot->data >= n) return delNode(curRoot->left, n);
        else return delNode(curRoot->right, n);
     }
     
     return curRoot;
}

int main() {
    node* root = NULL;
    
    root = insert(root, 15);
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 25);
    root = insert(root, 8);
    root = insert(root, 12);
    
    delNode(root, 8);
    
    print(root);
    
    return 0;
}
