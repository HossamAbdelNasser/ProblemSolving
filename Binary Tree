#include <iostream>
#include <queue>

using namespace std;

struct node {
  int data;
  node* left;
  node* right;
};

node* getNewNode(int n){
    node* newNode = new node();
    newNode->data = n;
    newNode->left = newNode->right = nullptr;
    return newNode;
}

node* insert(node* root, int n) {
    
    if (root == NULL) {
        root = getNewNode(n);
    }
    else if (n <= root->data) {
        root->left = insert(root->left, n);
    } else {
        root->right = insert(root->right, n);
    }
    return root;
}

bool searchTree(node* root, int n) {

    if (root) {
        if (root->data == n) {return true;}
    
        else if (root->data >= n) return searchTree(root->left, n);
        else return searchTree(root->right, n);
    }

    return false;
}


node* delNode(node* root, int n) {
    
    if (root == NULL) return root;
    
    if (root) {
        
        if (root->data == n) {
            
              if (!root->left && !root->right){
               
               root = NULL;
         }
            
          else if (root->right == NULL) {
             
             root = root->left;
        }
        
        else if (root->left == NULL) {
            
            root = root->right;
        }
        
            else {
                root->data = root->right->data;
                root->right = delNode(root->right, root->data);
            }
        }
    
        else if (root->data >= n) root->left = delNode(root->left, n);
        else root->right = delNode(root->right, n);
    }
        
     return root;
}

//Height of the tree
int maxDepth(node* root) {
    
    if (!root) return 0;
    
    int left = maxDepth(root->left);
    int right = maxDepth(root->right);
    
    return 1 + max(left, right);
}

//Difference in height between left and right subtrees
int heightDiff(node* root) {
  
    int left = maxDepth(root->left);
    int right = maxDepth(root->right);
    
   return left - right;
}

//Print the tree
void print(node* root) {
    
    if (root) {
    cout << root->data << endl;
    print(root->left);
    print(root->right);
    }
}

//Print the tree in hierarchical order
void printLevelOrder(node* root) {
    if (!root) return;
    
    queue<node*> q;
    
    q.push(root);
    
    while (!q.empty()) {
    
        int levelSize = q.size(); 
        
        for(int i = 0; i < levelSize; i++){
            
            node* r = q.front();
            cout << r->data << " ";
            
            q.pop();
            
              if (r->left != nullptr) {
                q.push(r->left);
            }
            
             if (r->right != nullptr) {
                q.push(r->right);
            }
        }
         cout << endl;
    }
}


int main() {
    
    node* root = NULL;
    
    root = insert(root, 15);
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 25);
    root = insert(root, 8);
    root = insert(root, 12);
    
    delNode(root, 8);
    
    printLevelOrder(root);
    
    return 0;
}
