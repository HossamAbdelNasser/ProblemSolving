class Solution {

public:

     int dp[10001]; // Memoization array

    int helper(vector<int>& coins, int amount) {
        
        if (amount < 0) return INT_MAX;
        if (amount == 0) return 0;

        if (dp[amount] != -1) return dp[amount];

        int minCoins = INT_MAX;
        for (int coin : coins) {
            int res = helper(coins, amount - coin);
            if (res != INT_MAX) {
                minCoins = min(minCoins, res + 1);
            }
        }

        return dp[amount] = minCoins;
    }

//Bottom-up Approach

int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, amount + 1); // Initialize with max value
        dp[0] = 0; // Base case: 0 coins to make amount 0

        for (int i = 1; i <= amount; ++i) {
            for (int coin : coins) {
                if (i - coin >= 0) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }

        return dp[amount] > amount ? -1 : dp[amount];
    }


    int coinChange(vector<int>& coins, int amount) {

      memset(dp, -1, sizeof(dp));
        int result = helper(coins, amount);
        return result == INT_MAX ? -1 : result;
    }
};

